name: Daily 3 Posts (auto keywords + 2 daily + 1 affiliate + rotate)

on:
  schedule:
    - cron: "5 0 * * *"   # 매일 09:05 KST (UTC 00:05)
  workflow_dispatch: {}

concurrency:
  group: autopost
  cancel-in-progress: true

# 커밋/푸시가 필요한 경우를 대비해 write 권한 부여
permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Secrets -> .env (리터럴 EOF)
      - name: Write .env from Secrets (do not commit secrets)
        run: |
          cat > .env << 'EOF'
          # ===== WordPress =====
          WP_URL=${{ secrets.WP_URL }}
          WP_USER=${{ secrets.WP_USER }}
          WP_APP_PASSWORD=${{ secrets.WP_APP_PASSWORD }}
          WP_TLS_VERIFY=${{ secrets.WP_TLS_VERIFY }}
          # ===== OpenAI =====
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}
          OPENAI_MODEL_LONG=${{ secrets.OPENAI_MODEL_LONG }}
          MAX_TOKENS_BODY=900
          # ===== Coupang Partners =====
          COUPANG_ACCESS_KEY=${{ secrets.COUPANG_ACCESS_KEY }}
          COUPANG_SECRET_KEY=${{ secrets.COUPANG_SECRET_KEY }}
          COUPANG_CHANNEL_ID=${{ secrets.COUPANG_CHANNEL_ID }}
          COUPANG_SUBID_PREFIX=${{ secrets.COUPANG_SUBID_PREFIX }}
          REQUIRE_COUPANG_API=${{ secrets.REQUIRE_COUPANG_API }}
          AFFILIATE_TIME_KST=${{ secrets.AFFILIATE_TIME_KST }}
          # ===== Posting / Taxonomy =====
          POST_STATUS=future
          KEYWORDS_CSV=keywords.csv
          ALLOW_CREATE_TERMS=${{ secrets.ALLOW_CREATE_TERMS }}
          EXISTING_CATEGORIES=뉴스,비공개,쇼핑,전체글,게시글,정보,취미
          # ===== Affiliate Content =====
          PRODUCTS_SEED_CSV=products_seed.csv
          DEFAULT_CATEGORY=정보
          DEFAULT_TAGS=
          AFFILIATE_CATEGORY=쇼핑
          AFFILIATE_TAGS=
          DISCLOSURE_TEXT=이 포스팅은 쿠팡 파트너스 활동의 일환으로, 이에 따른 일정액의 수수료를 제공합니다.
          # ===== Ads =====
          AD_METHOD=${{ secrets.AD_METHOD }}
          AD_SHORTCODE=${{ secrets.AD_SHORTCODE }}
          AD_INSERT_MIDDLE=${{ secrets.AD_INSERT_MIDDLE }}
          # ===== Keywords Auto Update =====
          NEWSAPI_KEY=${{ secrets.NEWSAPI_KEY }}
          NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
          KEYWORDS_K=10
          BAN_KEYWORDS=${{ secrets.BAN_KEYWORDS }}
          BACKUP_OLD_KEYWORDS=true
          USER_AGENT=gpt-blog-keywords/1.2
          # ===== Cache / Logs =====
          USAGE_DIR=.usage
          CACHE_DIR=.cache
          LLM_LOG_FILENAME=llm.log
          CACHE_TTL_DEFAULT=86400
          CACHE_MAX_FILES=500
          CACHE_DISABLE=false
          # ===== Flow switches =====
          KEYWORD_PICK_MODE=${{ secrets.KEYWORD_PICK_MODE }}
          SEED_PICK_MODE=${{ secrets.SEED_PICK_MODE }}
          USE_IMAGE=${{ secrets.USE_IMAGE }}
          BUTTON_TEXT=${{ secrets.BUTTON_TEXT }}
          # ===== Debug =====
          DRY_RUN=
          EOF

      # .env -> GITHUB_ENV (no eval)
      - name: Export .env to GITHUB_ENV
        run: |
          python - << 'PY'
          import os
          from dotenv import dotenv_values
          env = dotenv_values(".env")
          with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as f:
              for k,v in env.items():
                  if v is None:
                      continue
                  f.write(f"{k}<<__EOF__\n{v}\n__EOF__\n")
          PY

      - name: Preflight (Coupang keys present?)
        run: |
          if [ -n "$COUPANG_ACCESS_KEY" ] && [ -n "$COUPANG_SECRET_KEY" ]; then
            echo "[OK] Coupang keys are set."
          else
            echo "[WARN] COUPANG_ACCESS_KEY/SECRET_KEY empty -> API 검색/딥링크는 폴백 사용"
          fi

      - name: Update keywords (일반+쇼핑)
        run: |
          if [ -f update_keywords.py ]; then
            python update_keywords.py --k 10 --gold 5 --shop-k 12 --shop-gold 5 --days 3 --parallel 8 || true
          else
            echo "SKIP: update_keywords.py not found"
          fi

      - name: Show keyword heads (debug)
        run: |
          echo "== golden_shopping_keywords.csv (head) ==" && head -n 5 golden_shopping_keywords.csv || true
          echo "== keywords_shopping.csv (head) ==" && head -n 5 keywords_shopping.csv || true
          echo "== keywords_general.csv (head) ==" && head -n 5 keywords_general.csv || true
          echo "== keywords.csv (line) ==" && ( [ -f keywords.csv ] && head -n 1 keywords.csv || true )

      # === 제품 시드 ===
      - name: Build products_seed (from Coupang API)
        run: |
          if [ -f build_products_seed.py ]; then
            v="${REQUIRE_COUPANG_API:-false}"
            v="$(echo "$v" | tr '[:upper:]' '[:lower:]')"
            if [[ "$v" =~ ^(true|1|yes|y|on)$ ]]; then
              echo "[INFO] REQUIRE_COUPANG_API=$v -> try Coupang API"
              python build_products_seed.py || true
            else
              echo "[INFO] REQUIRE_COUPANG_API=$v -> skip API and use search fallback"
            fi
          else
            echo "SKIP: build_products_seed.py not found"
          fi

      - name: Ensure products_seed.csv exists (placeholder with expected headers)
        run: |
          if [ ! -s products_seed.csv ]; then
            echo "product_name,raw_url,pros,cons,keyword,title,url,image" > products_seed.csv
            echo "[INFO] created placeholder products_seed.csv (expected headers)"
          fi

      - name: Seed quality check (report + cleaned csv)
        run: |
          if [ -f seed_quality_check.py ] && [ -s products_seed.csv ]; then
            if [ "$(wc -l < products_seed.csv)" -gt 1 ]; then
              python seed_quality_check.py --write-clean --no-network --max-per-keyword 5 --report .cache/seed_report.md || true
            else
              echo "[INFO] skip seed_quality_check: only header (no rows)"
            fi
          else
            echo "[INFO] skip seed_quality_check (missing or empty products_seed.csv)"
          fi

      # === 로그/회피를 위한 사용폴더 보장 ===
      - name: Ensure .usage exists
        run: |
          mkdir -p .usage
          [ -f .usage/.gitkeep ] || touch .usage/.gitkeep

      # === 일반글 2건 ===
      - name: Schedule 2 daily posts (10:00 / 17:00 KST)
        run: |
          if [ -f auto_wp_gpt.py ]; then
            python auto_wp_gpt.py --mode=two-posts
          else
            echo "SKIP: auto_wp_gpt.py not found"
          fi

      # === 쿠팡글 1건 + 회전 ===
      - name: Schedule 1 affiliate post (13:00 KST) and rotate keywords
        run: |
          set -o pipefail
          if [ -f affiliate_post.py ]; then
            python affiliate_post.py 2>&1 | tee /tmp/affiliate_out.txt || true
          else
            echo "SKIP: affiliate_post.py not found" | tee /tmp/affiliate_out.txt
          fi

          echo "---- Affiliate step tail ----"
          tail -n 200 /tmp/affiliate_out.txt || true
          echo "---- used_shopping tail ----"
          tail -n 20 .usage/used_shopping.txt || true

          if grep -q '"post_id"' /tmp/affiliate_out.txt; then
            echo "[OK] affiliate post created/scheduled. Rotating keywords..."
            if [ -f rotate_keywords.py ]; then
              python rotate_keywords.py || true
            fi
          else
            echo "[INFO] Affiliate post not created. See [AFFILIATE] lines above for reason."
          fi

      # === (선택) 사용 키워드 로그를 레포에 보존 ===
      - name: Persist used keywords (optional)
        if: ${{ secrets.PERSIST_USAGE == '1' }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .usage/used_shopping.txt .usage/.gitkeep || true
          git diff --cached --quiet || git commit -m "chore(usage): persist used keywords log"
          git push
